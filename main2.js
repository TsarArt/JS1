// Все делалось через Quokka.js и из-за этого не использовал .html файл

'use strict';

// 1. Дан код:
// var a = 1, b = 1, c, d;
// c = ++a; alert(c);           // 2
// d = b++; alert(d);           // 1
// c = (2+ ++a); alert(c);      // 5
// d = (2+ b++); alert(d);      // 4
// alert(a);                    // 3
// alert(b);                    // 3

// Почему код даёт именно такие результаты?
/*
1) сначала увеличивает, затем выводит
2) сначала выводит, затем увеличивает
3) т. к. а=2, то увеличивается до 3 и только потом складывается и получаем 5
4) b увеличилась на переменной d и стало 2, но т к идет постинкремент, то выводит 4, а не 5
5-6) a и b увеличились при манипуляции всех этих действий
*/



// 2. Чему будет равен x в примере ниже?
// var a = 2;
// var x = 1 + (a *= 2);
// Ответ: 5



// 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:

//     если a и b положительные, вывести их разность;
//     если а и b отрицательные, вывести их произведение;
//     если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.
let num1 = parseFloat(prompt('Введите число №1'));
let num2 = parseFloat(prompt('Введите число №2'));
if (a >= 0 &&  b >= 0) {
    console.log(a - b);
} else if (a < 0 && b < 0) {
    console.log(a * b);
} else {
    console.log(a + b);
}



// 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.
let a = Math.round(Math.random() * (15 - 0) + 0);
switch (a) {
    case 0:
        console.log(a++);
    case 1:
        console.log(a++);
    case 2:
        console.log(a++);
    case 3:
        console.log(a++);
    case 4:
        console.log(a++);
    case 5:
        console.log(a++);
    case 6:
        console.log(a++);
    case 7:
        console.log(a++);
    case 8:
        console.log(a++);
    case 9:
        console.log(a++);
    case 10:
        console.log(a++);
    case 11:
        console.log(a++);
    case 12:
        console.log(a++);
    case 13:
        console.log(a++);
    case 14:
        console.log(a++);
    case 15:
        console.log(a++);
}



// 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
function mainAriphmetics (num1, num2) {
    return `Сумма первого и второго числа: ${num1 + num2}\nРазность первого и второго числа: ${num1 - num2}\nПроизведение первого и второго числа: ${num1 * num2}\nВозведение в степень: ${num1 ** num2}`;
}
// console.log(mainAriphmetics(num1, num2)); - как пример



// 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch).
function chooseAriphmetic (num1, num2, operation) {
    switch (operation) {
        case '+':
            return num1 + num2;
        case '-':
            return a - b;
        case '*':
            return num1 * num2;
        case '/':
            return num1 / num2;
    }
}
// console.log(chooseAriphmetic(5, 11, '*')); - как пример, как и в задании 5, числа должны браться из третьего задания, как я понял


// 7) *Сравнить null и 0. Попробуйте объяснить результат. => null это объект, а число 0 это число или зачастую еще выступает в виде false



// 8) *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.
// function power (val, powe) {
//     if (powe == 1) {
//         return val;
//     } else {
//         return val * pow(val, powe - 1);
//     }
// }
// Хз, не получилось, хоть и вариант решения понятен